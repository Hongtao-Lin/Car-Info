<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>汽车评论可视化</title>
    <script type="text/javascript" src="js/d3.js"></script>
    <script type="text/javascript" src="js/jquery.min.js"></script>
</head>
<style type="text/css">
body {
	color: gray;
	margin: 0;
}

.header {
	width: 100%;
	min-height: 50px;
	background-color: #E9E9E9;	
	position: relative;
}

.header .search {
	position: relative;
	top: 25%;
}

svg {
	position: absolute;
	top: calc(50% - 300px);
	left: calc(50% - 500px);	
}
.node {
  stroke: #fff;
  stroke-width: 1.5px;
  cursor:pointer;
}
.center_text {
  fill: #000;
  font-size: 12px;
  cursor: pointer;
  position: relative;
  pointer-events: none;
  
 }
g title {
	position: absolute;
}
.color_tag > div {
	display: inline-block;
}
div.tag_detail {
	position: absolute;
	top: 0;
	width: 250px;
	background: rgba(237,237,237,0.9);
	padding: 30px;
	max-height: 400px;
	display: none;
}
.tag_detail h4 {
	position: relative;
	display: inline-block;
	margin: 0;
	padding: 0;
	padding-bottom: 10px;
}
.cancel_button {
	float: right;
}
div.comment_item {
	padding-right: 3px;
	/*margin-bottom: 15px;*/
}
div.comment_detail {
	max-height: 300px;
	overflow-y: auto;
}
</style>
<body>

<div class="header">
	<div class="search">
		<form method="POST" action="/visual">
		<label for="series">series</label>
		<input name="sereis" type="text"></input>
		<button>submit</button>
	</form>
	</div>
</div>

<div id="view">
</div>

</body>

<script type="text/javascript">	
	var width = 960;
	var height = 600;

	function firm_display() {
		
		$("#view").empty();
		var svg = d3.select("#view").append("svg")
			.attr("width", width)
			.attr("height", height);
		var force = d3.layout.force()
			.linkDistance(190)
			.size([width, height]);	

		var color = ["#54a4ee", "#bedaf4"];

		d3.json("firms.json", function(error, graph) {

		var nodes = [], links = [];
		nodes.push({"id":0,"name":"汽车","group":0,"fixed":true,"x":width/2,"y":height/2});

		// init_force(graph, nodes, links);

		for (var i = 0; i < graph.nodes.length; ++i) {
			nodes.push(graph.nodes[i]);
			links.push({"source":i+1,"target":0});
		}

		force.nodes(nodes)
			.links(links)
			.start()
			.gravity(0)
			.charge( function(d) { 
				if (d.id == 0) {return 0;} else {return 200;} 
			});

		var link = svg.selectAll(".link")
		  	.data(links)
		  	.enter()
		  	.append("line")
		  	.attr("class", "link")
		  	.attr("stroke",function(d) {return d.id == 0? color[0] : color[1]; })
		  	.attr("stroke-opacity","0.8")
		  	.style("stroke-width",2);

		var node = svg.selectAll(".node")
			.data(nodes)
			.enter()
			.append("g")
			.attr("class", function(d) { return d.id == 0 ? "main_node center_node" : "firm_node"; })
			.style("pointer",function(d) { if(d.id != 0) return "cursor"; })
			.on("click", function(d) { 
				if(d.id == 0) return;
				// get data from ajax!
				
				return brand_display("汽车", d.name); 
			});

		var circle = node.append("circle")
			.attr("class", "node")
			.attr("r",function(d){ 
				if(d.id == 0) {
					return 100;
				} else {
					return Math.sqrt(d.weight*300) + Math.random()*5 + 25;
				} 
			})
			.style("fill", function(d) { return d.id == 0? color[0] : color[1];; })
			.on("mouseenter", function(d){
				if (d.id == 0)
					return;
				d3.select(this).attr("r", 1.2*this.r.baseVal.value);
			})
			.on("mouseout", function(d) {
				if (d.id == 0)
					return;
				d3.select(this)
					.attr("r", this.r.baseVal.value/1.2);
			});

		
		var node_text = node.append("text")
			.attr("class","nodetext")
			.style("text-anchor", "middle")
			.text(function(d) { return d.name; });

		var center_node = node[0][0];
		force.on("tick", function() {
			node.attr("transform", function(d){ 
				d.x = d.x < d.r/2 ? d.r/2 : d.x;  
				d.x = d.x + d.r/2 > width ? width - d.r/2 : d.x; 
				d.y = d.y < d.r/2 ? d.r/2 : d.y;  
				d.y = d.y + d.r/2 > height ? height - d.r/2 : d.y;
				return "translate("+d.x+"," + d.y + ")";
			});
					
			link.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });
			force.tick();
		});
		});

	};
	

	firm_display();

	function brand_display(father_name, center_name) {
		
		$("#view").empty();
		var svg = d3.select("#view").append("svg")
		.attr("width", width)
		.attr("height", height);
		var color = ["#54a4ee", "#bedaf4"];
		var force = d3.layout.force()
		.linkDistance(190)
		.size([width, height]);	
		d3.json("brands.json", function(error, graph) {

		var nodes = [], links = [];
		nodes.push({"id":0,"name":center_name,"group":0,"fixed":true,"x":width/2,"y":height/2});
		for (var i = 0; i < graph.nodes.length; ++i) {
			nodes.push(graph.nodes[i]);
			links.push({"source":i+1,"target":0});
		}

		force.nodes(nodes)
			.links(links)
			.start()
			.gravity(0)
			.charge( function(d) { 
				if (d.id == 0) {return 0;} else {return 200;} 
			});

		var link = svg.selectAll(".link")
		  	.data(links)
		  	.enter()
		  	.append("line")
		  	.attr("class", "link")
		  	.attr("stroke",function(d) {return d.id == 0? color[0] : color[1]; })
		  	.attr("stroke-opacity","0.8")
		  	.style("stroke-width",2);

		var node = svg.selectAll(".node")
		  .data(nodes)
		  .enter()
		  .append("g")
		  .attr("class", function(d) { return d.id == 0 ? "firm_node center_node" : "brand_node"; })
		  .style("pointer","cursor")
		  .on("click", function(d) { 
		  	if(d.id == 0) return;

		  	return series_display(center_name, d.name); 
		  });

		var circle = node.append("circle")
		  .attr("class", "node")
		  .attr("r",function(d){ 
		  	if(d.id == 0) {
		  		return 100;
		  	} else {
		  		return Math.sqrt(d.weight*300) + Math.random()*5 + 25;
		  	} 
		  })
		  .style("fill", function(d) { return d.id == 0? color[0] : color[1]; })
		  .on("mouseenter", function(d){
		  	if (d.id == 0)
		  		return;
		  	d3.select(this).attr("r", 1.2*this.r.baseVal.value);
		  })
		  .on("mouseout", function(d) {
		  	if (d.id == 0)
		  		return;
		  	d3.select(this)
		  		.attr("r", this.r.baseVal.value/1.2);
		  });


		var node_text = node.append("text")
		  .attr("class","nodetext")
		  .style("text-anchor", "middle")
		  .text(function(d) { return d.name; });

		var center_node = node[0][0];
		
		// begin father node creation
		
		var father_node = $(".center_node").clone(false, true) // deep clone
				.attr("class", "main_node father_node")
				.attr("transform", "translate(100," + height/2 + ")");
		father_node.find("text").text(father_name);
		father_node.insertAfter($(".center_node"));

		var father_line = $(".link:first").clone(false, true)
				.attr("x1", "50").attr("y1", height/2)
				.attr("x2", width/2).attr("y2", height/2)
				.attr("stroke", color[0]);
		father_line.insertAfter($(".link")[0]);


		father_node.on("click", function() {
			firm_display();
		});

		force.on("tick", function() {
			node.attr("transform", function(d){ 
				d.x = d.x < d.r/2 ? d.r/2 : d.x;  
				d.x = d.x + d.r/2 > width ? width - d.r/2 : d.x; 
				d.y = d.y < d.r/2 ? d.r/2 : d.y;  
				d.y = d.y + d.r/2 > height ? height - d.r/2 : d.y;
				return "translate("+d.x+"," + d.y + ")";
			});
					
			link.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });
			force.tick();
		});
		
		});

	};
	
	//brand_display(father_name, center_name);

	function series_display(father_name, center_name) {
		
		$("#view").empty();
		var svg = d3.select("#view").append("svg")
		.attr("width", width)
		.attr("height", height);
		var color = ["#54a4ee", "#bedaf4"];
		var force = d3.layout.force()
		.linkDistance(190)
		.size([width, height]);	
		d3.json("series.json", function(error, graph) {

		var nodes = [], links = [];
		nodes.push({"id":0,"name":center_name,"group":0,"fixed":true,"x":width/2,"y":height/2});
		for (var i = 0; i < graph.nodes.length; ++i) {
			nodes.push(graph.nodes[i]);
			links.push({"source":i+1,"target":0});
		}

		force.nodes(nodes)
			.links(links)
			.start()
			.gravity(0)
			.charge( function(d) { 
				if (d.id == 0) {return 0;} else {return 200;} 
			});

		var link = svg.selectAll(".link")
		  	.data(links)
		  	.enter()
		  	.append("line")
		  	.attr("class", "link")
		  	.attr("stroke",function(d) {return d.id == 0? color[0] : color[1]; })
		  	.attr("stroke-opacity","0.8")
		  	.style("stroke-width",2);

		var node = svg.selectAll(".node")
		  .data(nodes)
		  .enter()
		  .append("g")
		  .attr("class", function(d) { return d.id == 0 ? "brand_node center_node" : "series_node"; })
		  .style("pointer","cursor")
		  .on("click", function(d) { 
		  	if(d.id == 0) return;
		  	graph = {};
			name = center_name + d.name.replace(/\s/g, '');
			url = "/spec/" + name + "/";
			console.log(url);			
		  	$.ajax({
					url: url,
					success: function(data) {
						graph = data;
					  	return spec_display(center_name, graph); 
					},
					error: function() {
						console.log("error in ajax");
						// get to 500 error.
					}
				});
		  });

		var circle = node.append("circle")
		  .attr("class", "node")
		  .attr("r",function(d){ 
		  	if(d.id == 0) {
		  		return 100;
		  	} else {
		  		return Math.sqrt(d.weight*300) + Math.random()*5 + 25;
		  	} 
		  })
		  .style("fill", function(d) { return d.id == 0? color[0] : color[1]; })
		  .on("mouseenter", function(d){
		  	if (d.id == 0)
		  		return;
		  	d3.select(this).attr("r", 1.2*this.r.baseVal.value);
		  })
		  .on("mouseout", function(d) {
		  	if (d.id == 0)
		  		return;
		  	d3.select(this)
		  		.attr("r", this.r.baseVal.value/1.2);
		  });

		
		var node_text = node.append("text")
		  .attr("class","nodetext")
		  .style("text-anchor", "middle")
		  .text(function(d) { return d.name; });

		var center_node = node[0][0];

		// begin father node creation
		
		var father_node = $(".center_node").clone(false, true) // deep clone
				.attr("class", "firm_node father_node")
				.attr("transform", "translate(100," + height/2 + ")");
		father_node.find("text").text(father_name);
		father_node.insertAfter($(".center_node"));

		var father_line = $(".link:first").clone(false, true)
				.attr("x1", "50").attr("y1", height/2)
				.attr("x2", width/2).attr("y2", height/2)
				.attr("stroke", color[0]);
		father_line.insertAfter($(".link")[0]);

		father_node.on("click", function() {
			brand_display("汽车", father_name);
		});


		force.on("tick", function() {
			node.attr("transform", function(d){ 
				d.x = d.x < d.r/2 ? d.r/2 : d.x;  
				d.x = d.x + d.r/2 > width ? width - d.r/2 : d.x; 
				d.y = d.y < d.r/2 ? d.r/2 : d.y;  
				d.y = d.y + d.r/2 > height ? height - d.r/2 : d.y;
				return "translate("+d.x+"," + d.y + ")";
			});
					
			link.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });
			force.tick();
		});
		
		});

	};
	
	//series_display(father_name, center_name);


	function spec_display(father_name, center_graph) {

		$("#view").empty();
		// 0 for center, 1 for good, 2 for bad, 3 for neutral;
		var color = ["#54a4ee","red","#bedaf4","gray"];
		var svg = d3.select("#view").append("svg")
			.attr("width", width)
			.attr("height", height);
		var force = d3.layout.force()
			.linkDistance(190)
			.size([width, height]);	

		// special!
		var color_tag = d3.select("#view").append("div")
			.attr("class","color_tag")
			.selectAll("div")
			.data(color.slice(1, color.length))
			.enter()
			.append("div")
			.append("span")
			.attr("class","color")
			.style({"display": "inline-block", "background": function(d) {return d;}, "width": "20px", "height": "20px", "border-radius": "20px", "vertical-align": "middle", "border": "2px black solid"})
			.each(function(d, i) {
				var text = document.createElement("span");
				var name = function(i) {
					if (i == 0)
						return "正面评价";
					if (i == 1)
						return "负面评价";
					else
						return "中性评价";
				};
				text.innerHTML = name(i);
				text.style.marginRight = "5px";
				text.style.marginLeft = "3px";
				this.parentNode.appendChild(text);
			});

		graph = center_graph;
		console.log(graph);
		// d3.json("comment.json", function(error, graph) {
			var nodes = [], links = [];
			var series = graph.series;
			series["fixed"] = true;
			series["x"] = width/2;
			series["y"] = height/2;
			nodes.push(series);
			// create links;
			for (var i = 0; i < graph.nodes.length; ++i) {
				nodes.push(graph.nodes[i]);
				links.push({"source":i+1,"target":0});
			}

			// special!
			d3.select("#view").append("div")
				.attr("class","hot")
				.append("span")
				.text("热度:")
				.style({"margin-right":"3px"})
				.each(function() {
					var hot_num = graph.series.hot;
					var hot = document.createElement("span");
					hot.innerHTML = hot_num;
					this.parentNode.appendChild(hot);
					hot.style.color = "red";
				});

			force.nodes(nodes)
				.links(links)
				.start()
				.gravity(0)
				.charge( function(d) { 
					if (d.group == 0) {return 0;} else {return 200;} 
				;});
		  
			
			var link = svg.selectAll(".link")
			  .data(links)
			  .enter()
			  .append("line")
			  .attr("class", "link")
			  .attr("stroke",function(d) {return color[d.source.group]})
			  .attr("stroke-opacity","0.8")
			  .style("stroke-width",2);
			  
			var node = svg.selectAll(".node")
			  .data(nodes)
			  .enter()
			  .append("g")
			  .attr("class", function(d) { return d.id == 0 ? "series_node center_node" : "spec_node"; })
			  .style("pointer","cursor");

			var circle = node.append("circle")
			  .attr("class", "node")
			  .attr("r",function(d){ 
			  	if(d.group == 0) {
			  		return 100;
			  	} else {
			  		return Math.sqrt(d.weight*300) + Math.random()*5 + 5;
			  	} 
			  }) // special!
			  .style("fill", function(d) { return color[d.group]; })
			  .on("mouseenter", function(d){
			  	if (d.group == 0)
			  		return;
			  	d3.select(this).attr("r", 1.2*this.r.baseVal.value);
			  })
			  .on("mouseout", function(d) {
			  	if (d.group == 0)
			  		return;
			  	d3.select(this)
			  		.attr("r", this.r.baseVal.value/1.2);
			  });

			
			var node_text = node.append("text")
			  .attr("class","nodetext")
			  .style("text-anchor", "middle")
			  .text(function(d) { return d.name; });

			var center_node = node[0][0];
			force.on("tick", function() {
				node.attr("transform", function(d){ 
					d.x = d.x < d.r/2 ? d.r/2 : d.x;  
					d.x = d.x + d.r/2 > width ? width - d.r/2 : d.x; 
					d.y = d.y < d.r/2 ? d.r/2 : d.y;  
					d.y = d.y + d.r/2 > height ? height - d.r/2 : d.y;
					return "translate("+d.x+"," + d.y + ")";
				});
				node_text.attr("top", function(d){
					if (d.id == 0)
						return;
					var dx = d.x - center_node.__data__.x > 0 ? 1 : -1;
					var dy = d.y - center_node.__data__.y > 0 ? 1.4 : -1;
					var r = circle[0][d.id].getAttribute("r");
					d3.select(this).attr("dx", dx*r*1.2)
					d3.select(this).attr("dy", dy*r*1.2)
					 // = dx + center_node.__data__.x;
				});
				link.attr("x1", function(d) { return d.source.x; })
					.attr("y1", function(d) { return d.source.y; })
					.attr("x2", function(d) { return d.target.x; })
					.attr("y2", function(d) { return d.target.y; });
				force.tick();
			});

			// begin father node creation
			
			var father_node = $(".center_node").clone(false, true) // deep clone
					.attr("class", "brand_node father_node")
					.attr("transform", "translate(100," + height/2 + ")");
			father_node.find("text").text(father_name).attr("class","firm_node father_node");
			father_node.insertAfter($(".center_node"));

			var father_line = $(".link:first").clone(false, true)
					.attr("x1", "50").attr("y1", height/2)
					.attr("x2", width/2).attr("y2", height/2)
					.attr("stroke", color[0]);
			father_line.insertAfter($(".link")[0]);

			father_node.on("click", function() {
				series_display("宝马", father_name);
			});

			// special!

			// when click, dynamically create the detail div.
			// note that the order of nodes and comments should be the same.

			var comment_div = document.createElement("div");
			comment_div.className = "tag_detail";
			var content = ' \
				<h4></h4> \
				<span class="cancel_button" style="cursor:pointer;"><img src="image/tag-close.png" /></span> \
				<div class="comment_detail"></div> \
			';
			comment_div.innerHTML =  content;
			document.getElementById("view").appendChild(comment_div);

			node.on("click", function(d) {
				if (d.id != 0) {
					var comment_list = d.comments;
					var tag_detail = document.getElementsByClassName("tag_detail")[0];
					var comment_item, comment_tmp;
					var comment_detail = document.getElementsByClassName("comment_detail")[0];
					comment_detail.innerHTML = null;
					for (var i = 0; i < comment_list.length; ++i) {
						if (i == 0) {
							var comment = '\
								<div class="comment_item"> \
								<span style="position:relative; left:0; margin-top:10px"></span> \
								<span style="float: right; margin-right: 3px;"></span> \
								<p></p> \
								<hr style="margin-bottom: 0px;"> </div> \
							';
							comment_detail.innerHTML = comment;
							comment_item = document.getElementsByClassName("comment_item")[0];
							comment_tmp = comment_item;
							from = comment_list[i].from;
							if (comment_list[i].url) {
								from = '<a href="' + comment_list[i].url + '">' + comment_list[i].from + '</a>';						
							}
							comment_tmp.getElementsByTagName("span")[0].innerHTML = from;
							comment_item.getElementsByTagName("span")[1].innerHTML = comment_list[i].date;
							comment_item.getElementsByTagName("p")[0].innerHTML = comment_list[i].content;
						}
						else {
							comment_tmp = comment_item.cloneNode(true);
							from = comment_list[i].from;
							if (comment_list[i].url) {
								from = '<a href="' + comment_list[i].url + '">' + comment_list[i].from + '</a>';						
							}
							comment_tmp.getElementsByTagName("span")[0].innerHTML = from;
							comment_tmp.getElementsByTagName("span")[1].innerHTML = comment_list[i].date;
							comment_tmp.getElementsByTagName("p")[0].innerHTML = comment_list[i].content;
							comment_item.parentNode.appendChild(comment_tmp);
						}
					}
					
					tag_detail.style.display = "block";
					//console.log(1);
					tag_detail.getElementsByTagName("h4")[0].innerHTML = d.name;
					tag_detail.style.left = (d3.select(this)[0][0].__data__.x) + "px";
					tag_detail.style.top = (d3.select(this)[0][0].__data__.y) + "px";
					comment_detail.scrollTop = 0;
		            		

				}
			});

			var g = document.getElementsByTagName("g");
			for (var i = 1; i <= circle[0].length; ++i) {
				g[i].onclick = function(e) {
					//console.log(2);
					var ev = e || window.event;
			        if(ev.stopPropagation){
			            ev.stopPropagation();
			        }
			        else if(window.event){
			            window.event.cancelBubble = true;
			        }
				}
			}
			document.getElementsByClassName("tag_detail")[0].onclick = function(e) {
				//console.log(3);
				this.style.display = "block";
				var ev = e || window.event;
                                if(ev.stopPropagation){
                                    ev.stopPropagation();
                                }
                                else if(window.event){
                                    window.event.cancelBubble = true;
                                }

			};
			document.getElementsByClassName("cancel_button")[0].onclick = function(e) {
				this.parentNode.style.display = "none";
				//console.log(4);
				var ev = e || window.event;
		        if(ev.stopPropagation){
		            ev.stopPropagation();
		        }
		        else if(window.event){
		            window.event.cancelBubble = true;
		        }
			};
			document.onclick = function() {
				//console.log(5);
				var tag_detail = document.getElementsByClassName("tag_detail")[0];
				if (tag_detail.style.display == "block") 
					tag_detail.style.display = "none";
			};
	 	// });
		};
		
</script>
</html>
