<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>汽车评论可视化</title>
	<link rel="stylesheet" type="text/css" href="/css/style.css">
	<link rel="stylesheet" type="text/css" href="/css/bootstrap.min.css">
</head>
<body>

<div class="header">
<!-- 	<div class="search">
		<form method="POST" action="/visual">
		<label for="series">series</label>
		<input name="sereis" type="text"></input>
		<button>submit</button>
	</form>
	</div> -->
</div>

<div id="view">
</div>
</body>

<script type="text/javascript" src="/js/jquery.min.js"></script>
<script type="text/javascript" src="/js/bootstrap.min.js"></script>
<script type="text/javascript" src="/js/d3.js"></script>
<script type="text/javascript" src="/js/d3.layout.cloud.js"></script>
<script type="text/javascript" src="/js/index.js"></script>

<script type="text/javascript">	
	var width = 960;
	var height = 600;

	function firm_display() {
		
		$("#view").empty();
		var svg = d3.select("#view").append("svg")
			.attr("width", width)
			.attr("height", height);
		var force = d3.layout.force()
			.linkDistance(190)
			.size([width, height]);	

		var color = ["#54a4ee", "#bedaf4"];

		d3.json("firms.json", function(error, graph) {

		var nodes = [], links = [];
		nodes.push({"id":0,"name":"汽车","group":0,"fixed":true,"x":width/2,"y":height/2});

		// init_force(graph, nodes, links);

		for (var i = 0; i < graph.nodes.length; ++i) {
			nodes.push(graph.nodes[i]);
			links.push({"source":i+1,"target":0});
		}

		force.nodes(nodes)
			.links(links)
			.start()
			.gravity(0)
			.charge( function(d) { 
				if (d.id == 0) {return 0;} else {return 200;} 
			});

		var link = svg.selectAll(".link")
			.data(links)
			.enter()
			.append("line")
			.attr("class", "link")
			.attr("stroke",function(d) {return d.id == 0? color[0] : color[1]; })
			.attr("stroke-opacity","0.8")
			.style("stroke-width",2);

		var node = svg.selectAll(".node")
			.data(nodes)
			.enter()
			.append("g")
			.attr("class", function(d) { return d.id == 0 ? "main_node center_node" : "firm_node"; })
			.style("pointer",function(d) { if(d.id != 0) return "cursor"; })
			.on("click", function(d) { 
				if(d.id == 0) return;
				// get data from ajax!
				
				return brand_display("汽车", d.name); 
			});

		var circle = node.append("circle")
			.attr("class", "node")
			.attr("r",function(d){ 
				if(d.id == 0) {
					return 100;
				} else {
					return Math.sqrt(d.weight*300) + Math.random()*5 + 25;
				} 
			})
			.style("fill", function(d) { return d.id == 0? color[0] : color[1];; })
			.on("mouseenter", function(d){
				if (d.id == 0)
					return;
				d3.select(this).attr("r", 1.2*this.r.baseVal.value);
			})
			.on("mouseout", function(d) {
				if (d.id == 0)
					return;
				d3.select(this)
					.attr("r", this.r.baseVal.value/1.2);
			});

		
		var node_text = node.append("text")
			.attr("class","nodetext")
			.style("text-anchor", "middle")
			.text(function(d) { return d.name; });

		var center_node = node[0][0];
		force.on("tick", function() {
			node.attr("transform", function(d){ 
				d.x = d.x < d.r/2 ? d.r/2 : d.x;  
				d.x = d.x + d.r/2 > width ? width - d.r/2 : d.x; 
				d.y = d.y < d.r/2 ? d.r/2 : d.y;  
				d.y = d.y + d.r/2 > height ? height - d.r/2 : d.y;
				return "translate("+d.x+"," + d.y + ")";
			});
					
			link.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });
			force.tick();
		});
		});

	};

	// firm_display();
		
	function brand_display(father_name, center_name) {
		
		$("#view").empty();
		var svg = d3.select("#view").append("svg")
		.attr("width", width)
		.attr("height", height);
		var color = ["#54a4ee", "#bedaf4"];
		var force = d3.layout.force()
		.linkDistance(190)
		.size([width, height]);	
		d3.json("brands.json", function(error, graph) {

		var nodes = [], links = [];
		nodes.push({"id":0,"name":center_name,"group":0,"fixed":true,"x":width/2,"y":height/2});
		for (var i = 0; i < graph.nodes.length; ++i) {
			nodes.push(graph.nodes[i]);
			links.push({"source":i+1,"target":0});
		}

		force.nodes(nodes)
			.links(links)
			.start()
			.gravity(0)
			.charge( function(d) { 
				if (d.id == 0) {return 0;} else {return 200;} 
			});

		var link = svg.selectAll(".link")
		  	.data(links)
		  	.enter()
		  	.append("line")
		  	.attr("class", "link")
		  	.attr("stroke",function(d) {return d.id == 0? color[0] : color[1]; })
		  	.attr("stroke-opacity","0.8")
		  	.style("stroke-width",2);

		var node = svg.selectAll(".node")
		  .data(nodes)
		  .enter()
		  .append("g")
		  .attr("class", function(d) { return d.id == 0 ? "firm_node center_node" : "brand_node"; })
		  .style("pointer","cursor")
		  .on("click", function(d) { 
		  	if(d.id == 0) return;
		  	// console.log(center_name, d.name);
		  	return series_display(center_name, d.name); 
		  });

		var circle = node.append("circle")
		  .attr("class", "node")
		  .attr("r",function(d){ 
		  	if(d.id == 0) {
		  		return 100;
		  	} else {
		  		return Math.sqrt(d.weight*300) + Math.random()*5 + 25;
		  	} 
		  })
		  .style("fill", function(d) { return d.id == 0? color[0] : color[1]; })
		  .on("mouseenter", function(d){
		  	if (d.id == 0)
		  		return;
		  	d3.select(this).attr("r", 1.2*this.r.baseVal.value);
		  })
		  .on("mouseout", function(d) {
		  	if (d.id == 0)
		  		return;
		  	d3.select(this)
		  		.attr("r", this.r.baseVal.value/1.2);
		  });


		var node_text = node.append("text")
		  .attr("class","nodetext")
		  .style("text-anchor", "middle")
		  .text(function(d) { return d.name; });

		var center_node = node[0][0];
		
		// begin father node creation
		
		var father_node = $(".center_node").clone(false, true) // deep clone
				.attr("class", "main_node father_node")
				.attr("transform", "translate(100," + height/2 + ")");
		father_node.find("text").text(father_name);
		father_node.insertAfter($(".center_node"));

		var father_line = $(".link:first").clone(false, true)
				.attr("x1", "50").attr("y1", height/2)
				.attr("x2", width/2).attr("y2", height/2)
				.attr("stroke", color[0]);
		father_line.insertAfter($(".link")[0]);


		father_node.on("click", function() {
			firm_display();
		});

		force.on("tick", function() {
			node.attr("transform", function(d){ 
				d.x = d.x < d.r/2 ? d.r/2 : d.x;  
				d.x = d.x + d.r/2 > width ? width - d.r/2 : d.x; 
				d.y = d.y < d.r/2 ? d.r/2 : d.y;  
				d.y = d.y + d.r/2 > height ? height - d.r/2 : d.y;
				return "translate("+d.x+"," + d.y + ")";
			});
					
			link.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });
			force.tick();
		});
		
		});

	};
	
	//brand_display(father_name, center_name);

	function series_display(father_name, center_name) {
		
		$("#view").empty();
		var svg = d3.select("#view").append("svg")
		.attr("width", width)
		.attr("height", height);
		var color = ["#54a4ee", "#bedaf4"];
		var force = d3.layout.force()
		.linkDistance(190)
		.size([width, height]);	
		d3.json("series.json", function(error, graph) {

		var nodes = [], links = [];
		nodes.push({"id":0,"name":center_name,"group":0,"fixed":true,"x":width/2,"y":height/2});
		for (var i = 0; i < graph.nodes.length; ++i) {
			nodes.push(graph.nodes[i]);
			links.push({"source":i+1,"target":0});
		}

		force.nodes(nodes)
			.links(links)
			.start()
			.gravity(0)
			.charge( function(d) { 
				if (d.id == 0) {return 0;} else {return 200;} 
			});

		var link = svg.selectAll(".link")
		  	.data(links)
		  	.enter()
		  	.append("line")
		  	.attr("class", "link")
		  	.attr("stroke",function(d) {return d.id == 0? color[0] : color[1]; })
		  	.attr("stroke-opacity","0.8")
		  	.style("stroke-width",2);

		var node = svg.selectAll(".node")
		  .data(nodes)
		  .enter()
		  .append("g")
		  .attr("class", function(d) { return d.id == 0 ? "brand_node center_node" : "series_node"; })
		  .style("pointer","cursor")
		  .on("click", function(d) { 
		  	if(d.id == 0) return;
		  	graph = {};
			name = center_name + d.name.replace(/\s/g, '');
			url = "/spec/" + name + "/";
			console.log(url);			
		  	$.ajax({
					url: url,
					success: function(data) {
						graph = data;
					  	return spec_display(center_name, graph); 
					},
					error: function() {
						console.log("error in ajax");
						// get to 500 error.
					}
				});
		  });

		var circle = node.append("circle")
		  .attr("class", "node")
		  .attr("r",function(d){ 
		  	if(d.id == 0) {
		  		return 100;
		  	} else {
		  		return Math.sqrt(d.weight*300) + Math.random()*5 + 25;
		  	} 
		  })
		  .style("fill", function(d) { return d.id == 0? color[0] : color[1]; })
		  .on("mouseenter", function(d){
		  	if (d.id == 0)
		  		return;
		  	d3.select(this).attr("r", 1.2*this.r.baseVal.value);
		  })
		  .on("mouseout", function(d) {
		  	if (d.id == 0)
		  		return;
		  	d3.select(this)
		  		.attr("r", this.r.baseVal.value/1.2);
		  });

		
		var node_text = node.append("text")
		  .attr("class","nodetext")
		  .style("text-anchor", "middle")
		  .text(function(d) { return d.name; });

		var center_node = node[0][0];

		// begin father node creation
		
		var father_node = $(".center_node").clone(false, true) // deep clone
				.attr("class", "firm_node father_node")
				.attr("transform", "translate(100," + height/2 + ")");
		father_node.find("text").text(father_name);
		father_node.insertAfter($(".center_node"));

		var father_line = $(".link:first").clone(false, true)
				.attr("x1", "50").attr("y1", height/2)
				.attr("x2", width/2).attr("y2", height/2)
				.attr("stroke", color[0]);
		father_line.insertAfter($(".link")[0]);

		father_node.on("click", function() {
			brand_display("汽车", father_name);
		});


		force.on("tick", function() {
			node.attr("transform", function(d){ 
				d.x = d.x < d.r/2 ? d.r/2 : d.x;  
				d.x = d.x + d.r/2 > width ? width - d.r/2 : d.x; 
				d.y = d.y < d.r/2 ? d.r/2 : d.y;  
				d.y = d.y + d.r/2 > height ? height - d.r/2 : d.y;
				return "translate("+d.x+"," + d.y + ")";
			});
					
			link.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });
			force.tick();
		});
		
		});

	};
	// father_name = "宝马";
	// center_name = "宝马3系";
	series_display("宝马", "宝马3系");

	function spec_display(father_name, center_graph) {

		$("#view").empty();
		// 0 for center, 1 for good, 2 for bad, 3 for neutral;
		var color = ["#54a4ee","red","#bedaf4","gray"];
		var node_color = "#9AC9F4";
		var svg = d3.select("#view").append("svg")
			.attr("width", width)
			.attr("height", height);
		var force = d3.layout.force()
			.linkDistance(190)
			.size([width, height]);	

		// special!
		// var color_tag = d3.select("#view").append("div")
		// 	.attr("class","color_tag")
		// 	.selectAll("div")
		// 	.data(color.slice(1, color.length))
		// 	.enter()
		// 	.append("div")
		// 	.append("span")
		// 	.attr("class","color")
		// 	.style({"display": "inline-block", "background": function(d) {return d;}, "width": "20px", "height": "20px", "border-radius": "20px", "vertical-align": "middle", "border": "2px black solid"})
		// 	.each(function(d, i) {
		// 		var text = document.createElement("span");
		// 		var name = function(i) {
		// 			if (i == 0)
		// 				return "正面评价";
		// 			if (i == 1)
		// 				return "负面评价";
		// 			else
		// 				return "中性评价";
		// 		};
		// 		text.innerHTML = name(i);
		// 		text.style.marginRight = "5px";
		// 		text.style.marginLeft = "3px";
		// 		this.parentNode.appendChild(text);
		// 	});

		graph = center_graph;
		console.log(graph);
		var nodes = [], links = [];
		var spec = graph.spec;
		spec["fixed"] = true;
		spec["x"] = width/2;
		spec["y"] = height/2;
		spec["id"] = 0;
		nodes.push(spec);
		// create links;
		for (var i = 0; i < graph.nodes.length; ++i) {
			graph.nodes[i]["id"] = i+1;
			nodes.push(graph.nodes[i]);
			links.push({"source":i+1,"target":0});
		}

		// special!
		// d3.select("#view").append("div")
		// 	.attr("class","hot")
		// 	.append("span")
		// 	.text("热度:")
		// 	.style({"margin-right":"3px"})
		// 	.each(function() {
		// 		var hot_num = graph.spec.hot;
		// 		var hot = document.createElement("span");
		// 		hot.innerHTML = hot_num;
		// 		this.parentNode.appendChild(hot);
		// 		hot.style.color = "red";
		// 	});

		force.nodes(nodes)
			.links(links)
			.start()
			.gravity(0)
			.charge( function(d) { 
				if (d.id == 0) {return 0;} else {return 200;} 
			;});

		var link = svg.selectAll(".link")
		  .data(links)
		  .enter()
		  .append("line")
		  .attr("class", "link")
		  .attr("stroke",function(d) {return node_color})
		  .attr("stroke-opacity","0.8")
		  .style("stroke-width",2);
		  
		var node = svg.selectAll(".node")
		  .data(nodes)
		  .enter()
		  .append("g")
		  .attr("class", function(d) { return d.id == 0 ? "series_node center_node" : "spec_node"; })
		  .style("pointer","cursor");

		var circle = node.append("circle")
		  .attr("class", "node")
		  .attr("r",function(d){ 
		  	if(d.id == 0) {
		  		return 100;
		  	} else {
		  		return Math.sqrt(d.weight*300) + Math.random()*5 + 5;
		  	} 
		  }) // special!
		  .style("fill", function(d) {
		  	if (d.id == 0) {
		  		return color[0];
		  	} else {
		  		return node_color;
		  	}
		  })
		  .on("mouseenter", function(d){
		  	if (d.id == 0)
		  		return;
		  	d3.select(this).attr("r", 1.2*this.r.baseVal.value);
		  })
		  .on("mouseout", function(d) {
		  	if (d.id == 0)
		  		return;
		  	d3.select(this)
		  		.attr("r", this.r.baseVal.value/1.2);
		  });

		// console.log(circle);
		var node_text = node.append("text")
		  .attr("class","nodetext")
		  .style("text-anchor", "middle")
		  .text(function(d) { return d.name; });

		var center_node = node[0][0];
		force.on("tick", function() {
			node.attr("transform", function(d){ 
				d.x = d.x < d.r/2 ? d.r/2 : d.x;  
				d.x = d.x + d.r/2 > width ? width - d.r/2 : d.x; 
				d.y = d.y < d.r/2 ? d.r/2 : d.y;  
				d.y = d.y + d.r/2 > height ? height - d.r/2 : d.y;
				return "translate("+d.x+"," + d.y + ")";
			});
			node_text.attr("top", function(d){
				if (d.id == 0)
					return;
				var dx = d.x - center_node.__data__.x > 0 ? 1 : -1;
				var dy = d.y - center_node.__data__.y > 0 ? 1.4 : -1;
				var r = circle[0][d.id].getAttribute("r");
				d3.select(this).attr("dx", dx*r*1.2)
				d3.select(this).attr("dy", dy*r*1.2)
				 // = dx + center_node.__data__.x;
			});
			link.attr("x1", function(d) { return d.source.x; })
				.attr("y1", function(d) { return d.source.y; })
				.attr("x2", function(d) { return d.target.x; })
				.attr("y2", function(d) { return d.target.y; });
			force.tick();
		});

		// create keyword tags
		if (graph.keywords.length > 0) {
			$("#view").append($("<div id='keyword_div' />"));
			keyword_div = $("#keyword_div");
			keyword_div.append($('<span>标签：</span>'))
			keyword_span = null;
			// keyword_span = $(".keyword_span:first");
			graph.keywords.forEach(function(d) {
				if (keyword_span == null) {
					keyword_span = $("<div class='keyword_span'></div>");
					span = keyword_span;
				}
				span = keyword_span.clone();
				span.text(d.keyword);
				alpha = Math.min((d.weight/10), 0.8)
				span.css("background-color", "rgba(255,155,0," + alpha.toFixed(2) + ")");
				keyword_div.append(span);
			});
		}

		// create sentiment tags
		sen_color = ["#FF3B00", "#FFEB3B", "#01C832"];
		bar_length = 200;
		if (graph.spec.sentiments[0] > 0) {
			// for all.
			$('#view').append($("<div id='sentiment_all_div' />"));
			sentiment_all_div = $("#sentiment_all_div");
			sentiment_all_div.append($('<span>评价：</span>'))
			sentiment_all_span = null;
			sentiment_all_arr = graph.spec.sentiments;
			total_sentiment = sentiment_all_arr[0];
			sentiment_all_div.width(bar_length);
			sentiment_all_arr.slice(1,5).forEach(function(d, i) {
				if (sentiment_all_span == null) {
					sentiment_all_span = $("<div class='sentiment_all_span grow' data-toggle='tooltip' data-placement='top' title=''></div>");
					span = sentiment_all_span;
				}
				span = sentiment_all_span.clone();
				span.attr("title", "共有" + d + "条评价");
				span.width((bar_length*d/total_sentiment).toFixed(2));
				span.css("background-color", sen_color[i]);
				// console.log(1);
				sentiment_all_div.append(span);
			}); 

		}

		// begin father node creation
		
		var father_node = $(".center_node").clone(false, true) // deep clone
				.attr("class", "brand_node father_node")
				.attr("transform", "translate(100," + height/2 + ")");
		father_node.find("text").text(father_name).attr("class","firm_node father_node");
		father_node.insertAfter($(".center_node"));

		var father_line = $(".link:first").clone(false, true)
				.attr("x1", "50").attr("y1", height/2)
				.attr("x2", width/2).attr("y2", height/2)
				.attr("stroke", color[0]);
		father_line.insertAfter($(".link")[0]);

		father_node.on("click", function() {
			series_display("宝马", father_name);
		});

		// special!

		// when click, dynamically create the detail div.
		// note that the order of nodes and comments should be the same.

		var comment_div = document.createElement("div");
		comment_div.className = "tag_detail";
		var content = ' \
			<div><h4></h4> \
			<span class="cancel_button" style="cursor:pointer;"><img src="image/tag-close.png" /></span> \
			<div id="sentiment_div"> \
				<span class="sentiment_span grow" data-toggle="tooltip" data-placement="top" title=""></span> \
				<span class="sentiment_span grow" data-toggle="tooltip" data-placement="top" title=""></span> \
				<span class="sentiment_span grow" data-toggle="tooltip" data-placement="top" title=""></span> \
			</div></div> \
			<div class="comment_detail"></div> \
		';
		comment_div.innerHTML =  content;
		document.getElementById("view").appendChild(comment_div);

		node.on("click", function(d) {
			if (d.id == 0) {
				return;
			};
			var comment_list = d.comments;
			var tag_detail = document.getElementsByClassName("tag_detail")[0];
			var comment_item, comment_tmp;
			var comment_detail = document.getElementsByClassName("comment_detail")[0];
			comment_detail.innerHTML = null;

			$(comment_detail).unbind("scroll");

			for (var i = 0; i < comment_list.length; ++i) {
				if (i == 0) {
					var comment = '\
						<div class="comment_item"> \
						<span style="position:relative; left:0; margin-top:10px"></span> \
						<span style="float: right; margin-right: 3px;"></span> \
						<p></p> \
						<hr style="margin-bottom: 0px;"> </div> \
					';
					comment_detail.innerHTML = comment;
					comment_item = document.getElementsByClassName("comment_item")[0];
					comment_tmp = comment_item;
					web = comment_list[i].web;
					if (comment_list[i].url) {
						web = '<a href="' + comment_list[i].url + '" target="_blank">' + comment_list[i].web + '</a>';						
					}
					comment_tmp.getElementsByTagName("span")[0].innerHTML = web;
					comment_item.getElementsByTagName("span")[1].innerHTML = comment_list[i].date;
					comment_item.getElementsByTagName("p")[0].innerHTML = comment_list[i].comment;
				}
				else {
					comment_tmp = comment_item.cloneNode(true);
					web = comment_list[i].web;
					if (comment_list[i].url) {
						web = '<a href="' + comment_list[i].url + '">' + comment_list[i].web + '</a>';						
					}
					comment_tmp.getElementsByTagName("span")[0].innerHTML = web;
					comment_tmp.getElementsByTagName("span")[1].innerHTML = comment_list[i].date;
					comment_tmp.getElementsByTagName("p")[0].innerHTML = comment_list[i].comment;
					comment_item.parentNode.appendChild(comment_tmp);
				}
			}
			tag_detail.style.display = "block";
			tag_detail.getElementsByTagName("h4")[0].innerHTML = d.name;
			tag_detail.style.left = (d3.select(this)[0][0].__data__.x) + "px";
			tag_detail.style.top = (d3.select(this)[0][0].__data__.y) + "px";
			comment_detail.scrollTop = 0;

			// for tag sentiment
			var bar_length = 150;
			// sen_color = ["#FF3B00", "#03A9F4", "#BFCFD5"];
			if (graph.sentiments.length > 0) {
				$(".sentiment_span").toArray().forEach(function(e, i) {
					sentiment_arr = graph.sentiments[d.id-1];
					$(e).width((bar_length*sentiment_arr[i+1]/sentiment_arr[0]).toFixed(2));
					$(e).css("background-color", sen_color[i]);
					$(e).attr("title", "共有" + sentiment_arr[i+1] + "条评价")
				});
			};

			var load_offset = 0;
			function loadMore() {
				url = "/spec/" + spec.name + "/load_more/" + d.name + "/" + load_offset;
				$.ajax({
					url: url,
					success: function(data) {
						comment_item = document.getElementsByClassName("comment_item")[0];
						len = data.length;
						if (!len) {
							div = document.createElement("div");
							div.className = "load_fail";
							div.innerHTML = '<p>No more :(</p>'
							comment_item.parentNode.appendChild(div);
							return;
						}
						comment_list = data;
						load_offset += len;
						for (var i = 0; i < len; ++i) {
							comment_tmp = comment_item.cloneNode(true);
							web = comment_list[i].web;
							if (comment_list[i].url) {
								web = '<a href="' + comment_list[i].url + '">' + comment_list[i].web + '</a>';						
							}
							comment_tmp.getElementsByTagName("span")[0].innerHTML = web;
							comment_tmp.getElementsByTagName("span")[1].innerHTML = comment_list[i].date;
							comment_tmp.getElementsByTagName("p")[0].innerHTML = comment_list[i].comment;
							comment_item.parentNode.appendChild(comment_tmp);
						}
						$(comment_detail).bind('scroll', bindScroll);

					},
					error: function() {
						console.log("error in loading data");
						// get to 500 error.
					}
				});
			};

			function bindScroll() {
				if ( $(comment_detail).scrollTop() + $(comment_detail).height() > comment_detail.scrollHeight - 50 ) {
					$(comment_detail).unbind('scroll');
					loadMore();
				}
			}

			$(comment_detail).scroll(bindScroll);
		});

		var g = document.getElementsByTagName("g");
		for (var i = 1; i <= circle[0].length; ++i) {
			// console.log(2);
			g[i].onclick = function(e) {
				var ev = e || window.event;
		        if(ev.stopPropagation){
		            ev.stopPropagation();
		        }
		        else if(window.event){
		            window.event.cancelBubble = true;
		        }
			}
		};

		document.getElementsByClassName("tag_detail")[0].onclick = function(e) {
			// console.log(3);
			this.style.display = "block";
			var ev = e || window.event;
            if(ev.stopPropagation){
                ev.stopPropagation();
            }
            else if(window.event){
                window.event.cancelBubble = true;
            }
		};

		document.getElementsByClassName("cancel_button")[0].onclick = function(e) {
			this.parentNode.parentNode.style.display = "none";
			var ev = e || window.event;
	        if(ev.stopPropagation){
	            ev.stopPropagation();
	        }
	        else if(window.event){
	            window.event.cancelBubble = true;
	        }
		};

		document.onclick = function() {
			// console.log(5);
			var tag_detail = document.getElementsByClassName("tag_detail")[0];
			if (tag_detail != null && tag_detail.style.display == "block") 
				tag_detail.style.display = "none";
		};

		function wordcloud_draw(words) {
			var fill = d3.scale.category20();

			console.log(words);
			d3.layout.cloud().size([300, 100])
				.words([
			        "Hello", "world", "normally", "you", "want", "more", "words",
			        "than", "this"].map(function(d) {
				        return {text: d, size: 10 + Math.random() * 90};
			      }))
				.padding(5)
				.rotate(function() {return ~~(Math.random()*2)*90;})
				.fontSize(function(d) {return d.size;})
				.on("end", draw)
				.start();

			function draw(words) {
				d3.select("#view").append("svg")
					.attr("width", 400)
					.attr("height", 150)
					.attr("id", "wordcloud")
					.append("g")
					.attr("trasform", "translate(320,200)")
					.selectAll("text")
					.data(words)
					.enter().append("text")
					.style("font-size", function(d) { return d.size + "px"; })
					.style("fill", function(d, i) { return fill(i); })
    				.style("font-family", "黑体")
    				.attr("transform", function(d) {
                        return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                    })
                    .text(function(d) { return d.text; });

			};
		};

		// $.ajax({
		// 	url: "/wordcloud/" + graph.spec.name,
		// 	success: function(data) {
		// 		words = data;
		// 		wordcloud_draw(words);
		// 	},
		// 	error: function() {
		// 		console.log("error in loading wordcloud");
		// 		// get to 500 error.
		// 	}
		// });

	}	

</script>
</html>
